// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: duels.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createDuel = `-- name: CreateDuel :one
INSERT INTO duels (
    id,
    name,
    racer_1_id,
    racer_2_id,
    race_xp, 
    start_time
)
VALUES(
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
RETURNING id, name, racer_1_id, racer_2_id, race_xp, completed, winner_id, start_time, end_time
`

type CreateDuelParams struct {
	ID        uuid.UUID
	Name      string
	Racer1ID  uuid.UUID
	Racer2ID  uuid.UUID
	RaceXp    int32
	StartTime time.Time
}

func (q *Queries) CreateDuel(ctx context.Context, arg CreateDuelParams) (Duel, error) {
	row := q.db.QueryRowContext(ctx, createDuel,
		arg.ID,
		arg.Name,
		arg.Racer1ID,
		arg.Racer2ID,
		arg.RaceXp,
		arg.StartTime,
	)
	var i Duel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Racer1ID,
		&i.Racer2ID,
		&i.RaceXp,
		&i.Completed,
		&i.WinnerID,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const getDuels = `-- name: GetDuels :many
SELECT id, name, racer_1_id, racer_2_id, race_xp, completed, winner_id, start_time, end_time FROM duels
WHERE completed = FALSE
`

func (q *Queries) GetDuels(ctx context.Context) ([]Duel, error) {
	rows, err := q.db.QueryContext(ctx, getDuels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Duel
	for rows.Next() {
		var i Duel
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Racer1ID,
			&i.Racer2ID,
			&i.RaceXp,
			&i.Completed,
			&i.WinnerID,
			&i.StartTime,
			&i.EndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
