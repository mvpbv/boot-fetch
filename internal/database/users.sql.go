// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, boot_name, discord_name, created_at, updated_at, wizard, nickname)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, boot_name, discord_name, created_at, updated_at, wizard, nickname, target
`

type CreateUserParams struct {
	ID          uuid.UUID
	BootName    string
	DiscordName string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Wizard      bool
	Nickname    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.BootName,
		arg.DiscordName,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Wizard,
		arg.Nickname,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.BootName,
		&i.DiscordName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Wizard,
		&i.Nickname,
		&i.Target,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, boot_name, discord_name, created_at, updated_at, wizard, nickname, target FROM users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.BootName,
		&i.DiscordName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Wizard,
		&i.Nickname,
		&i.Target,
	)
	return i, err
}

const getUserIdByDiscordName = `-- name: GetUserIdByDiscordName :one
SELECT id FROM users WHERE discord_name = $1
`

func (q *Queries) GetUserIdByDiscordName(ctx context.Context, discordName string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserIdByDiscordName, discordName)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, boot_name, discord_name, created_at, updated_at, wizard, nickname, target FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.BootName,
			&i.DiscordName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Wizard,
			&i.Nickname,
			&i.Target,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWizards = `-- name: GetWizards :many
SELECT id, boot_name, discord_name, created_at, updated_at, wizard, nickname, target FROM users WHERE wizard = True
`

func (q *Queries) GetWizards(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getWizards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.BootName,
			&i.DiscordName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Wizard,
			&i.Nickname,
			&i.Target,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const makeWizard = `-- name: MakeWizard :one
UPDATE users SET wizard = True WHERE id = $1 RETURNING id, boot_name, discord_name, created_at, updated_at, wizard, nickname, target
`

func (q *Queries) MakeWizard(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, makeWizard, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.BootName,
		&i.DiscordName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Wizard,
		&i.Nickname,
		&i.Target,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET updated_at = $2, nickname = $3 WHERE id = $1
`

type UpdateUserParams struct {
	ID        uuid.UUID
	UpdatedAt time.Time
	Nickname  string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.ID, arg.UpdatedAt, arg.Nickname)
	return err
}
