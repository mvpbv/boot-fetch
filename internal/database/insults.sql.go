// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: insults.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createInsult = `-- name: CreateInsult :one
INSERT INTO insults (
    id,
    user_id,
    insult
)
VALUES(
    $1,
    $2,
    $3
)
RETURNING id, user_id, insult
`

type CreateInsultParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
	Insult string
}

func (q *Queries) CreateInsult(ctx context.Context, arg CreateInsultParams) (Insult, error) {
	row := q.db.QueryRowContext(ctx, createInsult, arg.ID, arg.UserID, arg.Insult)
	var i Insult
	err := row.Scan(&i.ID, &i.UserID, &i.Insult)
	return i, err
}

const getUserInsults = `-- name: GetUserInsults :many
SELECT id, user_id, insult FROM insults WHERE user_id = $1
`

func (q *Queries) GetUserInsults(ctx context.Context, userID uuid.UUID) ([]Insult, error) {
	rows, err := q.db.QueryContext(ctx, getUserInsults, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Insult
	for rows.Next() {
		var i Insult
		if err := rows.Scan(&i.ID, &i.UserID, &i.Insult); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
