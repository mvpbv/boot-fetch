// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_progress.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getFirstProgressUser = `-- name: GetFirstProgressUser :one
SELECT progress.lessons, progress.time, progress.level, progress.xp, progress.total_xp
FROM progress
JOIN users ON users.id = progress.user_id
WHERE users.id = $1
ORDER BY time ASC
LIMIT 1
`

type GetFirstProgressUserRow struct {
	Lessons int32
	Time    time.Time
	Level   int32
	Xp      int32
	TotalXp int32
}

func (q *Queries) GetFirstProgressUser(ctx context.Context, id uuid.UUID) (GetFirstProgressUserRow, error) {
	row := q.db.QueryRowContext(ctx, getFirstProgressUser, id)
	var i GetFirstProgressUserRow
	err := row.Scan(
		&i.Lessons,
		&i.Time,
		&i.Level,
		&i.Xp,
		&i.TotalXp,
	)
	return i, err
}

const getRecentProgressUser = `-- name: GetRecentProgressUser :one
SELECT progress.lessons, progress.time, progress.level, progress.xp, progress.total_xp
FROM progress
JOIN users ON users.id = progress.user_id
WHERE users.id = $1
ORDER BY time DESC
LIMIT 1
`

type GetRecentProgressUserRow struct {
	Lessons int32
	Time    time.Time
	Level   int32
	Xp      int32
	TotalXp int32
}

func (q *Queries) GetRecentProgressUser(ctx context.Context, id uuid.UUID) (GetRecentProgressUserRow, error) {
	row := q.db.QueryRowContext(ctx, getRecentProgressUser, id)
	var i GetRecentProgressUserRow
	err := row.Scan(
		&i.Lessons,
		&i.Time,
		&i.Level,
		&i.Xp,
		&i.TotalXp,
	)
	return i, err
}

const getUserProgress = `-- name: GetUserProgress :many
SELECT progress.level, progress.xp, progress.lessons, progress.total_xp, progress.time, users.discord_name
FROM progress
JOIN users ON users.id = progress.user_id
WHERE users.id = $1
ORDER BY time DESC
`

type GetUserProgressRow struct {
	Level       int32
	Xp          int32
	Lessons     int32
	TotalXp     int32
	Time        time.Time
	DiscordName string
}

func (q *Queries) GetUserProgress(ctx context.Context, id uuid.UUID) ([]GetUserProgressRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserProgress, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserProgressRow
	for rows.Next() {
		var i GetUserProgressRow
		if err := rows.Scan(
			&i.Level,
			&i.Xp,
			&i.Lessons,
			&i.TotalXp,
			&i.Time,
			&i.DiscordName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
